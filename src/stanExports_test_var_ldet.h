// Generated by rstantools.  Do not edit by hand.

/*
    stanmygrad is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    stanmygrad is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with stanmygrad.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_test_var_ldet_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_test_var_ldet");
    reader.add_event(40, 38, "end", "model_test_var_ldet");
    return reader;
}
template <typename T0__>
typename boost::math::tools::promote_args<T0__>::type
var_ldet(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& X, std::ostream* pstream__);
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
set_grad(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& var_data,
             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& var,
             const int& var_grad, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 11;
        validate_non_negative_index("var_", "rows(var_data)", rows(var_data));
        validate_non_negative_index("var_", "cols(var_data)", cols(var_data));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> var_(rows(var_data), cols(var_data));
        stan::math::initialize(var_, DUMMY_VAR__);
        stan::math::fill(var_, DUMMY_VAR__);
        current_statement_begin__ = 12;
        if (as_bool(logical_eq(var_grad, 0))) {
            current_statement_begin__ = 13;
            stan::math::assign(var_, var_data);
        } else {
            current_statement_begin__ = 15;
            stan::math::assign(var_, var);
        }
        current_statement_begin__ = 17;
        return stan::math::promote_scalar<fun_return_scalar_t__>(var_);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct set_grad_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, Eigen::Dynamic>& var_data,
             const Eigen::Matrix<T1__, Eigen::Dynamic, Eigen::Dynamic>& var,
             const int& var_grad, std::ostream* pstream__) const {
        return set_grad(var_data, var, var_grad, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_test_var_ldet
  : public stan::model::model_base_crtp<model_test_var_ldet> {
private:
        int N;
        matrix_d X_dat;
        int X_grad;
public:
    model_test_var_ldet(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_test_var_ldet(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_test_var_ldet_namespace::model_test_var_ldet";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            current_statement_begin__ = 24;
            validate_non_negative_index("X_dat", "N", N);
            validate_non_negative_index("X_dat", "N", N);
            context__.validate_dims("data initialization", "X_dat", "matrix_d", context__.to_vec(N,N));
            X_dat = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, N);
            vals_r__ = context__.vals_r("X_dat");
            pos__ = 0;
            size_t X_dat_j_2_max__ = N;
            size_t X_dat_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_dat_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_dat_j_1_max__; ++j_1__) {
                    X_dat(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 26;
            context__.validate_dims("data initialization", "X_grad", "int", context__.to_vec());
            X_grad = int(0);
            vals_i__ = context__.vals_i("X_grad");
            pos__ = 0;
            X_grad = vals_i__[pos__++];
            check_greater_or_equal(function__, "X_grad", X_grad, 0);
            check_less_or_equal(function__, "X_grad", X_grad, 1);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 31;
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "N", N);
            num_params_r__ += (N * N);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_test_var_ldet() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 31;
        if (!(context__.contains_r("X")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable X missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("X");
        pos__ = 0U;
        validate_non_negative_index("X", "N", N);
        validate_non_negative_index("X", "N", N);
        context__.validate_dims("parameter initialization", "X", "matrix_d", context__.to_vec(N,N));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> X(N, N);
        size_t X_j_2_max__ = N;
        size_t X_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                X(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(X);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable X: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 31;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> X;
            (void) X;  // dummy to suppress unused var warning
            if (jacobian__)
                X = in__.matrix_constrain(N, N, lp__);
            else
                X = in__.matrix_constrain(N, N);
            // model body
            {
            current_statement_begin__ = 36;
            validate_non_negative_index("X_", "N", N);
            validate_non_negative_index("X_", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> X_(N, N);
            stan::math::initialize(X_, DUMMY_VAR__);
            stan::math::fill(X_, DUMMY_VAR__);
            stan::math::assign(X_,set_grad(X_dat, X, X_grad, pstream__));
            current_statement_begin__ = 37;
            lp_accum__.add(var_ldet(X_, pstream__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("X");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(N);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_test_var_ldet_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> X = in__.matrix_constrain(N, N);
        size_t X_j_2_max__ = N;
        size_t X_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                vars__.push_back(X(j_1__, j_2__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_test_var_ldet";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t X_j_2_max__ = N;
        size_t X_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "X" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t X_j_2_max__ = N;
        size_t X_j_1_max__ = N;
        for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "X" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_test_var_ldet_namespace::model_test_var_ldet stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
